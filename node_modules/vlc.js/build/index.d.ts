/// <reference types="node" />
import { OptionsInit } from 'got';
import { URL } from 'url';
import { VLCStatus, VLCPlaylist } from './types.js';
export declare const VALID_RATIOS: string[];
export declare const MAX_DB = 20;
export declare const MIN_DB = -20;
export default class Client {
    private server;
    private advanced;
    constructor(address: URL | string, password: string, advanced?: OptionsInit);
    /**
     * This sends commands to the HTTP server to control VLC. See the provided link for all the commands. For more
     * query options (provided in the second parameter) make each property equal a value.
     * @example
     * command("volume", ["val", "50%"])
     * @param {String} vlcCommand
     * @param {String[]} options
     * @returns {Promise<VLCStatus>}
     * @link https://github.com/videolan/vlc/blob/master/share/lua/http/requests/README.txt
     */
    command(cmd: string, options?: string[]): Promise<VLCStatus>;
    /**
     * Returns status.json /requests/status.json
     * @returns {Promise<VLCStatus>}
     */
    getStatus(): Promise<VLCStatus>;
    /**
     * Returns the playlist.json /requests/playlist.json
     * @return {Promise<VLCPlaylist>}
     */
    getPlaylist(): Promise<VLCPlaylist>;
    /**
     * Add <uri> to playlist
     * @param {string} uri
     * @returns {Promise<VLCStatus>}
     */
    queue(uri: string): Promise<VLCStatus>;
    /**
     * Add subtitle to currently playing file
     * @param {string} uri
     * @returns {Promise<VLCStatus>}
     */
    addSubtitles(uri: string): Promise<VLCStatus>;
    /**
     * Play an item based on ID. If an ID isn't provided the last item will play.
     * @param {number|string} id
     * @returns {Promise<VLCStatus>}
     */
    resume(id?: number | string): Promise<VLCStatus>;
    /**
     * Toggle pause
     * @returns {Promise<VLCStatus>}
     */
    pause(): Promise<VLCStatus>;
    /**
     * Resume playback
     * @returns {Promise<VLCStatus>}
     */
    forceResume(): Promise<VLCStatus>;
    /**
     * Pause playback
     * @returns {Promise<VLCStatus>}
     */
    forcePause(): Promise<VLCStatus>;
    /**
     * Stop playback
     * @returns {Promise<VLCStatus>}
     */
    stop(): Promise<VLCStatus>;
    /**
     * Play next item
     * @returns {Promise<VLCStatus>}
     */
    next(): Promise<VLCStatus>;
    /**
     * Jump to previous item
     * @returns {Promise<VLCStatus>}
     */
    previous(): Promise<VLCStatus>;
    /**
     * Remove media based on ID. If an ID isn't provided it'll remove the current item
     * @param {string} id
     * @returns {Promise<VLCStatus>}
     */
    remove(id?: string): Promise<VLCStatus>;
    /**
     * Empty the playlist
     * @returns {Promise<VLCStatus>}
     */
    empty(): Promise<VLCStatus>;
    /**
     * Set audio delay
     * @param {number} seconds
     * @returns {Promise<VLCStatus>}
     */
    setDelay(seconds: number): Promise<VLCStatus>;
    /**
     * Set subtitle delay
     * @param {number} seconds
     * @returns {Promise<VLCStatus>}
     */
    setSubtitleDelay(seconds: number): Promise<VLCStatus>;
    /**
     * Set playback rate it must be greater than zero
     * @param {number} newRate
     * @returns {Promise<VLCStatus>}
     */
    setRate(newRate: number): Promise<VLCStatus>;
    /**
     * Set aspect ratio, Valid ratios:
     * 1:1 , 4:3 , 5:4 , 16:9 , 16:10 , 221:100 , 235:100 , 239:100
     * @param {number} newRatio
     * @returns {Promise<VLCStatus>}
     */
    aspectRatio(newRatio: string): Promise<VLCStatus>;
    /**
     * Sort the playlist based on mode and order
     * - 0 Id
     * - 1 Name
     * - 3 Author
     * - 5 Random
     * - 7 Track number
     * @param {number} mode
     * @param {number} order
     * @returns {Promise<VLCStatus>}
     */
    sort(mode: 0 | 1 | 3 | 5 | 7, order: 0 | 1): Promise<VLCStatus>;
    /**
     * Random playback
     * @returns {Promise<VLCStatus>}
     */
    random(): Promise<VLCStatus>;
    /**
     * Toggle repeat (current item)
     * @returns {Promise<VLCStatus>}
     */
    repeat(): Promise<VLCStatus>;
    /**
     * Toggle loop (current playlist)
     * @returns {Promise<VLCStatus>}
     */
    loop(): Promise<VLCStatus>;
    /**
     * Toggle fullscreen
     * @returns {Promise<VLCStatus>}
     */
    fullscreen(): Promise<VLCStatus>;
    /**
     * Enable services discovery module
     * @param {string} val
     * @returns {Promise<VLCStatus>}
     */
    sdAdd(val: string): Promise<VLCStatus>;
    /**
     * Disable services discovery module
     * @param {string} val
     * @returns {Promise<VLCStatus>}
     */
    sdRemove(val: string): Promise<VLCStatus>;
    /**
     * Seek to provided value.
     * Acceptable forms: [+ or -][<int><H or h>:][<int><M or m or '>:][<int><nothing or S or s or ">]
     * or [+ or -]<int>%
     * @param {string|number} val
     * @returns {Promise<VLCStatus>}
     */
    seek(val: string | number): Promise<VLCStatus>;
    /**
     * Sets the preamp value, must be >=-20 and <=20
     * @param {number} dB
     * @returns {Promise<VLCStatus>}
     */
    preamp(dB: number): Promise<VLCStatus>;
    /**
     * set the gain for a specific band, must be >=-20 and <=20
     * @param {string} band
     * @param {number} gain
     * @returns {Promise<VLCStatus>}
     */
    equalizer(band: string, gain: number): Promise<VLCStatus>;
    /**
     * Toggle the equalizer
     * @param {boolean} on
     * @returns {Promise<VLCStatus>}
     */
    toggleEqualizer(on: boolean): Promise<VLCStatus>;
    /**
     * set the equalizer preset as per the id specified
     * @param {string|number} id
     * @returns {Promise<VLCStatus>}
     */
    setPreset(id: string | number): Promise<VLCStatus>;
    /**
     * Select an item based on title
     * @param {string} title
     * @returns {Promise<VLCStatus>}
     */
    title(title: string): Promise<VLCStatus>;
    /**
     * Select an item based on chapter
     * @param {string} chapter
     * @returns {Promise<VLCStatus>}
     */
    chapter(chapter: string): Promise<VLCStatus>;
    /**
     * Select the audio track (use the number from the stream)
     * @param {number} id
     * @returns {Promise<VLCStatus>}
     */
    selAudioTrack(id: number): Promise<VLCStatus>;
    /**
     * Select the video track (use the number from the stream)
     * @param {number} id
     * @returns {Promise<VLCStatus>}
     */
    selVideoTrack(id: number): Promise<VLCStatus>;
    /**
     * Select the subtitle track (use the number from the stream)
     * @param {number} id
     * @returns {Promise<VLCStatus>}
     */
    selSubtitleTrack(id: number): Promise<VLCStatus>;
    /**
     * Set volume
     * @param {number|string} value
     * @returns {Promise<VLCStatus>}
     */
    setVolume(value: number | string): Promise<VLCStatus>;
    private request;
}
export * from './types.js';
//# sourceMappingURL=index.d.ts.map